{
	"name": "HackathonDataQualityFlowWithChecks",
	"properties": {
		"description": "HackathonDataQualityFlowWithChecks",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "HackathonDataQuality",
						"type": "DatasetReference"
					},
					"name": "HackathonDataSet"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "HackathonDataQualitySink",
						"type": "DatasetReference"
					},
					"name": "HackathonDataSetOutput"
				},
				{
					"dataset": {
						"referenceName": "HackathonDataQualitySink",
						"type": "DatasetReference"
					},
					"name": "HackahtonDataSetInvalidCity"
				},
				{
					"dataset": {
						"referenceName": "HackathonDataQualitySink",
						"type": "DatasetReference"
					},
					"name": "HackathonFinalDataSet"
				}
			],
			"transformations": [
				{
					"name": "RuleSplitForAlerting"
				},
				{
					"name": "AddBusinessColumns"
				}
			],
			"script": "source(output(\n\t\tId as integer,\n\t\tAge as integer,\n\t\tCity as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> HackathonDataSet\nAddBusinessColumns split(Age_Valid==0,\n\tCity_NA==0,\n\tdisjoint: false) ~> RuleSplitForAlerting@(AgeInvalid, CityInvalid, ValidData)\nHackathonDataSet derive(Age_Valid = iif(Age >0, 1, 0),\n\t\tAge_Legal = iif(Age>18, 1, 0),\n\t\tAge_Pension = iif(Age>67, 1, 0),\n\t\tCity_NA = iif(City != \"\", 1, 0),\n\t\tCity_NonNL = iif(City == 'Rome' || City == 'Tokyo' || City == 'Madrid', 1, 0)) ~> AddBusinessColumns\nRuleSplitForAlerting@AgeInvalid sink(input(\n\t\tId as string,\n\t\tAge as string,\n\t\tCity as string,\n\t\tAge_Valid as string,\n\t\tAge_Legal as string,\n\t\tAge_Pension as string,\n\t\tCity_NA as string,\n\t\tCity_Valid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['ageinvalid.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> HackathonDataSetOutput\nRuleSplitForAlerting@CityInvalid sink(input(\n\t\tId as string,\n\t\tAge as string,\n\t\tCity as string,\n\t\tAge_Valid as string,\n\t\tAge_Legal as string,\n\t\tAge_Pension as string,\n\t\tCity_NA as string,\n\t\tCity_Valid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['invalidcity.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> HackahtonDataSetInvalidCity\nRuleSplitForAlerting@ValidData sink(input(\n\t\tId as string,\n\t\tAge as string,\n\t\tCity as string,\n\t\tAge_Valid as string,\n\t\tAge_Legal as string,\n\t\tAge_Pension as string,\n\t\tCity_NA as string,\n\t\tCity_Valid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['finaldataset.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> HackathonFinalDataSet"
		}
	}
}